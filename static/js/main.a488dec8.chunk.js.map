{"version":3,"sources":["components/binary-node/binary-node.js","components/line/line.js","components/binary-tree/binary-tree.js","components/input-panel/input-panel.js","components/app/app.js","index.js"],"names":["BinaryNode","props","value","top","left","bgcolor","onChangeColor","styles","background","onClick","className","style","Line","nodes","nodesArr","newArr","length","colorChilds","key","arr","right","posx","posy","i","push","x1","y1","x2","y2","stroke","leftChild","rightChild","BinaryTree","onDragStart","onDragOver","onDragDrop","onDragEnd","onDrag","elements","map","item","e","onDrop","draggable","id","height","width","postop","posleft","InputPanel","onInput","useState","nodeNumber","setnodeNumber","text","settext","onSubmit","preventDefault","type","placeholder","onChange","isNaN","target","App","nodesArray","setnodesArray","posTop","setposTop","posLeft","setposLeft","dragging","setdragging","color","setcolor","infoTextShow","b","k","rightNode","y","updateColor","hex","index","findIndex","elem","node","console","log","pageX","currentTarget","getBoundingClientRect","pageY","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a488dec8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './binary-node.css';\r\n\r\nfunction BinaryNode(props) {\r\n  const { value, top, left, bgcolor, onChangeColor } = props;\r\n\r\n  let styles = {\r\n    top: `${top}px`, //apply top position of selected node\r\n    left: `${left}px`, //apply left position of selected node//\r\n    background: `${bgcolor}`, //apply color on selected node\r\n  };\r\n\r\n  return (\r\n    <div onClick={onChangeColor} className='node' style={styles}>\r\n      <span>{value}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BinaryNode;\r\n","import React from 'react';\r\n\r\nfunction Line({ nodes, nodesArr }) {\r\n  let newArr = [];\r\n\r\n  const colorChilds = (key, arr, left, right, posx, posy) => {\r\n    for (let i = key; i < arr.length; i++) {\r\n      if (arr[i].value === right) {\r\n        newArr.push(\r\n          <line\r\n            key={arr[i].value}\r\n            x1={posx + 15}\r\n            y1={posy + 15}\r\n            x2={arr[i].left + 15}\r\n            y2={arr[i].top + 15}\r\n            stroke='black'\r\n          />\r\n        );\r\n        colorChilds(\r\n          i,\r\n          arr,\r\n          arr[i].leftChild,\r\n          arr[i].rightChild,\r\n          arr[i].left,\r\n          arr[i].top\r\n        );\r\n      } else if (arr[i].value === left) {\r\n        newArr.push(\r\n          <line\r\n            key={arr[i].value}\r\n            x1={posx + 15}\r\n            y1={posy + 15}\r\n            x2={arr[i].left + 15}\r\n            y2={arr[i].top + 15}\r\n            stroke='black'\r\n          />\r\n        );\r\n        colorChilds(\r\n          i,\r\n          arr,\r\n          arr[i].leftChild,\r\n          arr[i].rightChild,\r\n          arr[i].left,\r\n          arr[i].top\r\n        );\r\n      } else {\r\n        continue;\r\n      }\r\n    }\r\n  };\r\n\r\n  if (nodesArr.length !== 0)\r\n    colorChilds(\r\n      0,\r\n      nodesArr,\r\n      nodesArr[0].leftChild,\r\n      nodesArr[0].rightChild,\r\n      nodesArr[0].left,\r\n      nodesArr[0].top\r\n    );\r\n\r\n  return <>{newArr}</>;\r\n}\r\n\r\nexport default Line;\r\n","import React from 'react';\r\nimport BinaryNode from '../binary-node/binary-node';\r\nimport Line from '../line/line';\r\nimport './binary-tree.css';\r\n\r\nfunction BinaryTree({\r\n  nodes,\r\n  onChangeColor,\r\n  onDragStart,\r\n  onDragOver,\r\n  onDragDrop,\r\n  onDragEnd,\r\n  onDrag,\r\n  top,\r\n  left,\r\n}) {\r\n  const elements = nodes.map(item => {\r\n    //creating a node component for each row in node array\r\n    return (\r\n      <div\r\n        key={item.id}\r\n        onDragStart={e => onDragStart(e, item)}\r\n        onDragOver={e => onDragOver(e)}\r\n        onDragEnd={e => onDragEnd(e, item)}\r\n        onDrag={e => onDrag(e, item)}\r\n        onDrop={e => onDragDrop(e, item)}\r\n        draggable={true}\r\n      >\r\n        <BinaryNode {...item} onChangeColor={() => onChangeColor(item.id)} />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className='binary-tree'>\r\n      <svg height='400' width='1200' className='svg-container'>\r\n        <Line\r\n          nodes={nodes.length}\r\n          nodesArr={nodes}\r\n          postop={top}\r\n          posleft={left}\r\n        />\r\n      </svg>\r\n      {elements}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BinaryTree;\r\n","import React, { useState } from 'react';\r\nimport './input-panel.css';\r\n\r\nfunction InputPanel({ onInput }) {\r\n  const [nodeNumber, setnodeNumber] = useState('');\r\n  const [text, settext] = useState('');\r\n\r\n  const sendNumber = e => {\r\n    //sending input value parameter to function in app.js\r\n    e.preventDefault();\r\n    onInput(nodeNumber);\r\n  };\r\n\r\n  const changeValue = e => {\r\n    //checking input value, adding into state\r\n    if (!isNaN(e.target.value) && +e.target.value < 7) {\r\n      setnodeNumber(e.target.value);\r\n      settext('');\r\n    } else {\r\n      settext('Введите число меньше 7');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={sendNumber}>\r\n        <input\r\n          className='form-input'\r\n          type='text'\r\n          placeholder='Введите количество уровней'\r\n          onChange={changeValue}\r\n          value={nodeNumber}\r\n        />\r\n        <button className='btn-show' type='submit'>\r\n          Показать\r\n        </button>\r\n        <span>{text}</span>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputPanel;\r\n","import React, { useState } from 'react';\r\nimport BinaryTree from '../binary-tree/binary-tree';\r\nimport InputPanel from '../input-panel/input-panel';\r\nimport { HuePicker } from 'react-color';\r\n\r\nimport './app.css';\r\n\r\nfunction App(props) {\r\n  const [nodesArray, setnodesArray] = useState([]); //array of tree nodes\r\n  const [posTop, setposTop] = useState(0); //current tree node(used for d&d)\r\n  const [posLeft, setposLeft] = useState(0); //current tree node(used for d&d)\r\n  const [dragging, setdragging] = useState(false); //current tree node(used for d&d)\r\n  const [color, setcolor] = useState('#ff0000'); //state for changing color\r\n  const infoText = [\r\n    `1 - Укажите количество уровней дерева N;`,\r\n    `2 - Для изменения цвета узла и его потомков выберите цвет и выполните клик по одному из узлов дерева;`,\r\n    `3 - Вы можете перемещать узлы дерева зажатием ЛКМ.`,\r\n  ]; //info arr on page\r\n\r\n  const infoTextShow = infoText.map((item, key) => {\r\n    // creating info p tags\r\n    return <p key={key}>{item}</p>;\r\n  });\r\n\r\n  function dragStartHandler(e, node) {\r\n    //getting current node on start d&d\r\n    const dragging = true;\r\n    setdragging(dragging);\r\n    console.log('drag', node);\r\n  }\r\n\r\n  function dragOverHandler(e) {\r\n    //canceling standard browser functionality\r\n    e.preventDefault();\r\n  }\r\n\r\n  function dragHandler(e, node) {\r\n    e.preventDefault();\r\n    if (dragging) {\r\n      let left = e.pageX - e.currentTarget.getBoundingClientRect().left - 18;\r\n      let top = e.pageY - e.currentTarget.getBoundingClientRect().top + 398;\r\n      setposTop(top);\r\n      setposLeft(left);\r\n    }\r\n    setnodesArray(\r\n      nodesArray.map(item => {\r\n        if (item.value === node.value) {\r\n          return { ...item, left: posLeft, top: posTop };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  }\r\n\r\n  function dragEndHandler(e, node) {\r\n    setdragging(false);\r\n\r\n    e.preventDefault();\r\n  }\r\n\r\n  function dropHandler(e, node) {\r\n    //swapping nodes parameters on drop\r\n    e.preventDefault();\r\n    console.log('drop', node);\r\n    // setnodesArray(nodesArray.map(item => {\r\n    //     if (item.value === node.value ) {\r\n    //         return {...item, value:currentNode.value, id:currentNode.id,\r\n    //                 bgcolor:currentNode.bgcolor, leftChild:node.leftChild, rightChild:node.rightChild}\r\n    //     }\r\n    //     if (item.value === currentNode.value) {\r\n    //         return {...item, value:node.value, id:node.id,\r\n    //                 bgcolor:node.bgcolor, leftChild:currentNode.leftChild, rightChild:currentNode.rightChild}\r\n    //     }\r\n    //     return item;\r\n    // }))\r\n  }\r\n\r\n  const changeNodeColor = id => {\r\n    //changing color of selected node\r\n\r\n    const colorChilds = (key, arr, left, right) => {\r\n      for (let i = key; i < arr.length; i++) {\r\n        if (arr[i].value === right) {\r\n          arr[i].bgcolor = color;\r\n          colorChilds(i, arr, arr[i].leftChild, arr[i].rightChild);\r\n        } else if (arr[i].value === left) {\r\n          arr[i].bgcolor = color;\r\n          colorChilds(i, arr, arr[i].leftChild, arr[i].rightChild);\r\n        } else {\r\n          continue;\r\n        }\r\n      }\r\n    };\r\n\r\n    setnodesArray(() => {\r\n      const index = nodesArray.findIndex(elem => elem.id === id);\r\n      let newArr = [...nodesArray];\r\n      let right = newArr[index].rightChild;\r\n      let left = newArr[index].leftChild;\r\n      newArr[index].bgcolor = color;\r\n      colorChilds(index, newArr, left, right);\r\n      return newArr;\r\n    });\r\n  };\r\n\r\n  const createNodeTree = nodes => {\r\n    //creating array of nodes using it's length value\r\n    setnodesArray(() => {\r\n      let newArr = [],\r\n        top = 60,\r\n        left = 585,\r\n        b = left,\r\n        k = 1,\r\n        rightNode = left,\r\n        value = 0;\r\n\r\n      for (let i = 0; i < nodes; i++) {\r\n        for (let y = 1; y <= k; y++) {\r\n          if (y === 1) {\r\n            newArr.push({\r\n              value,\r\n              top,\r\n              left: rightNode,\r\n              bgcolor: '#fff',\r\n              id: value,\r\n              leftChild: value * 2 + 1,\r\n              rightChild: value * 2 + 2,\r\n            });\r\n            b = rightNode;\r\n          } else {\r\n            b += (left / k) * 2;\r\n            newArr.push({\r\n              value,\r\n              top,\r\n              left: b,\r\n              bgcolor: '#fff',\r\n              id: value,\r\n              leftChild: value * 2 + 1,\r\n              rightChild: value * 2 + 2,\r\n            });\r\n          }\r\n          value++;\r\n        }\r\n        rightNode -= left / k / 2;\r\n        k *= 2;\r\n        top += 50;\r\n      }\r\n\r\n      return newArr;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className='wrapper'>\r\n        <div className='control-panel'>\r\n          <InputPanel onInput={createNodeTree} />\r\n          <HuePicker\r\n            className='color-picker'\r\n            color={color}\r\n            onChange={updateColor => setcolor(updateColor.hex)}\r\n          />\r\n        </div>\r\n        <div className='info-panel'>{infoTextShow}</div>\r\n\r\n        <BinaryTree\r\n          nodes={nodesArray}\r\n          onChangeColor={changeNodeColor}\r\n          onDragStart={dragStartHandler}\r\n          onDragOver={dragOverHandler}\r\n          onDragEnd={dragEndHandler}\r\n          onDrag={dragHandler}\r\n          onDragDrop={dropHandler}\r\n          top={posTop}\r\n          left={posLeft}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}