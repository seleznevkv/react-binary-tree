{"version":3,"sources":["components/binary-node/binary-node.js","components/line/line.js","components/binary-tree/binary-tree.js","components/input-panel/input-panel.js","components/app/app.js","index.js"],"names":["BinaryNode","props","value","top","left","bgcolor","onChangeColor","styles","background","onClick","className","style","Line","nodes","nodesArr","newArr","colorChilds","key","arr","right","posx","posy","i","length","push","x1","y1","x2","y2","stroke","leftChild","rightChild","BinaryTree","onDragStart","onDragOver","onDragDrop","onDragEnd","onDrag","elements","map","item","e","onDrop","draggable","id","height","width","postop","posleft","InputPanel","onInput","useState","nodeNumber","setnodeNumber","text","settext","onSubmit","preventDefault","type","placeholder","onChange","isNaN","target","App","nodesArray","setnodesArray","setCurrentNode","setposX","setposY","posTop","setposTop","posLeft","setposLeft","dragging","setdragging","x","y","color","setcolor","infoTextShow","b","k","rightNode","updateColor","hex","index","findIndex","elem","node","currentTarget","parentNode","getBoundingClientRect","console","log","pageX","pageY","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5d4fed3.chunk.js","sourcesContent":["import React from 'react'\r\nimport './binary-node.css'\r\n\r\nfunction BinaryNode(props) {\r\n\r\n    \r\n        const {value, top, left, bgcolor, onChangeColor} = props;\r\n\r\n        let styles = {\r\n            top: `${top}px`,    //apply top position of selected node\r\n            left: `${left}px`,  //apply left position of selected node//\r\n            background: `${bgcolor}` //apply color on selected node\r\n        }\r\n\r\n        let classNames = \"node\";\r\n \r\n        return (\r\n            <div \r\n                onClick={onChangeColor} \r\n                className={classNames} \r\n                style={styles} \r\n            >\r\n                <span>{value}</span>\r\n            </div>\r\n        )    \r\n}\r\n\r\nexport default BinaryNode\r\n\r\n","import React from 'react'\r\n\r\nfunction Line({nodes,nodesArr}) {\r\n\r\nlet newArr = [];\r\n\r\n    const colorChilds = (key, arr, left, right , posx, posy) => {\r\n        for (let i = key; i < arr.length; i++) {\r\n            if (arr[i].value === right) {\r\n                newArr.push(\r\n                    <line key={arr[i].value} x1={posx + 15} y1={posy + 15} x2={arr[i].left + 15} y2={arr[i].top + 15} stroke=\"black\"/>\r\n                )\r\n                colorChilds(i, arr, arr[i].leftChild, arr[i].rightChild, arr[i].left, arr[i].top);\r\n            } else\r\n            if (arr[i].value === left) {\r\n                newArr.push(\r\n                    <line key={arr[i].value} x1={posx + 15} y1={posy + 15} x2={arr[i].left + 15} y2={arr[i].top + 15} stroke=\"black\"/>\r\n                )\r\n                colorChilds(i, arr, arr[i].leftChild, arr[i].rightChild, arr[i].left, arr[i].top);\r\n            } else {\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n        \r\n        colorChilds(0, nodesArr, 1, 2, 585, 60);\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <>\r\n    {newArr}\r\n    </>\r\n);\r\n\r\n    // switch (nodes) { //very BAD lines realization code\r\n    //     case 3:\r\n            \r\n    //         return (\r\n    //             <>  \r\n    //              <line x1={nodesArr[0].left + 15} y1={nodesArr[0].top + 15} x2={nodesArr[1].left + 15} y2={nodesArr[1].top + 15} stroke=\"black\"/>\r\n    //                 <line x1={nodesArr[0].left + 15} y1={nodesArr[0].top + 15} x2={nodesArr[2].left + 15} y2={nodesArr[2].top + 15} stroke=\"black\"/>\r\n    //                 {/* <line x1=\"600\" y1=\"70\" x2=\"300\" y2=\"120\" stroke=\"black\"/>\r\n    //                 <line x1=\"600\" y1=\"70\" x2=\"900\" y2=\"120\" stroke=\"black\"/>    */}\r\n    //             </>\r\n    //          )\r\n    //     case 7:\r\n    //         return (\r\n    //             <>  \r\n\r\n    //             <line x1={nodesArr[0].left + 15} y1={nodesArr[0].top + 15} x2={nodesArr[1].left + 15} y2={nodesArr[1].top + 15} stroke=\"black\"/>\r\n    //             <line x1={nodesArr[0].left + 15} y1={nodesArr[0].top + 15} x2={nodesArr[2].left + 15} y2={nodesArr[2].top + 15} stroke=\"black\"/>\r\n\r\n    //             <line x1={nodesArr[1].left + 15} y1={nodesArr[1].top + 15} x2={nodesArr[3].left + 15} y2={nodesArr[3].top + 15} stroke=\"black\"/>\r\n    //             <line x1={nodesArr[1].left + 15} y1={nodesArr[1].top + 15} x2={nodesArr[4].left + 15} y2={nodesArr[4].top + 15} stroke=\"black\"/>\r\n\r\n    //             <line x1={nodesArr[2].left + 15} y1={nodesArr[1].top + 15} x2={nodesArr[5].left + 15} y2={nodesArr[5].top + 15} stroke=\"black\"/>\r\n    //             <line x1={nodesArr[2].left + 15} y1={nodesArr[1].top + 15} x2={nodesArr[6].left + 15} y2={nodesArr[6].top + 15} stroke=\"black\"/>\r\n\r\n\r\n    //                 {/* <line x1=\"600\" y1=\"70\" x2=\"300\" y2=\"120\" stroke=\"black\"/>\r\n    //                 <line x1=\"600\" y1=\"70\" x2=\"900\" y2=\"120\" stroke=\"black\"/>   \r\n\r\n    //                 <line x1=\"300\" y1=\"120\" x2=\"150\" y2=\"170\" stroke=\"black\"/>\r\n    //                 <line x1=\"300\" y1=\"120\" x2=\"450\" y2=\"170\" stroke=\"black\"/>   \r\n    //                 <line x1=\"900\" y1=\"120\" x2=\"750\" y2=\"170\" stroke=\"black\"/>\r\n    //                 <line x1=\"900\" y1=\"120\" x2=\"1050\" y2=\"170\" stroke=\"black\"/>   */}\r\n    //             </>\r\n    //          )\r\n        \r\n    //     case 15:\r\n    //         return (\r\n    //             <>\r\n    //             <line x1={nodesArr[0].left + 15} y1={nodesArr[0].top + 15} x2={nodesArr[1].left + 15} y2={nodesArr[1].top + 15} stroke=\"black\"/>\r\n    //             <line x1={nodesArr[0].left + 15} y1={nodesArr[0].top + 15} x2={nodesArr[2].left + 15} y2={nodesArr[2].top + 15} stroke=\"black\"/>\r\n\r\n    //             <line x1={nodesArr[1].left + 15} y1={nodesArr[1].top + 15} x2={nodesArr[3].left + 15} y2={nodesArr[3].top + 15} stroke=\"black\"/>\r\n    //             <line x1={nodesArr[1].left + 15} y1={nodesArr[1].top + 15} x2={nodesArr[4].left + 15} y2={nodesArr[4].top + 15} stroke=\"black\"/>\r\n\r\n    //             <line x1={nodesArr[2].left + 15} y1={nodesArr[1].top + 15} x2={nodesArr[5].left + 15} y2={nodesArr[5].top + 15} stroke=\"black\"/>\r\n    //             <line x1={nodesArr[2].left + 15} y1={nodesArr[1].top + 15} x2={nodesArr[6].left + 15} y2={nodesArr[6].top + 15} stroke=\"black\"/>\r\n\r\n                    \r\n    //                 {/* <line x1=\"600\" y1=\"70\" x2=\"300\" y2=\"120\" stroke=\"black\"/>\r\n    //                 <line x1=\"600\" y1=\"70\" x2=\"900\" y2=\"120\" stroke=\"black\"/>   \r\n\r\n    //                 <line x1=\"300\" y1=\"120\" x2=\"150\" y2=\"170\" stroke=\"black\"/>\r\n    //                 <line x1=\"300\" y1=\"120\" x2=\"450\" y2=\"170\" stroke=\"black\"/>   \r\n    //                 <line x1=\"900\" y1=\"120\" x2=\"750\" y2=\"170\" stroke=\"black\"/>\r\n    //                 <line x1=\"900\" y1=\"120\" x2=\"1050\" y2=\"170\" stroke=\"black\"/> \r\n\r\n    //                 <line x1=\"150\" y1=\"170\" x2=\"75\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"150\" y1=\"170\" x2=\"225\" y2=\"220\" stroke=\"black\"/>   \r\n    //                 <line x1=\"450\" y1=\"170\" x2=\"525\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"450\" y1=\"170\" x2=\"375\" y2=\"220\" stroke=\"black\"/> \r\n                    \r\n    //                 <line x1=\"750\" y1=\"170\" x2=\"675\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"750\" y1=\"170\" x2=\"825\" y2=\"220\" stroke=\"black\"/>   \r\n    //                 <line x1=\"1050\" y1=\"170\" x2=\"1125\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"1050\" y1=\"170\" x2=\"975\" y2=\"220\" stroke=\"black\"/>  */}\r\n\r\n\r\n    //             </>\r\n    //          )\r\n            \r\n        \r\n    //     case 31:\r\n    //         return (\r\n    //             <>\r\n    //                 <line x1=\"600\" y1=\"70\" x2=\"300\" y2=\"120\" stroke=\"black\"/>\r\n    //                 <line x1=\"600\" y1=\"70\" x2=\"900\" y2=\"120\" stroke=\"black\"/>   \r\n    \r\n    //                 <line x1=\"300\" y1=\"120\" x2=\"150\" y2=\"170\" stroke=\"black\"/>\r\n    //                 <line x1=\"300\" y1=\"120\" x2=\"450\" y2=\"170\" stroke=\"black\"/>   \r\n    //                 <line x1=\"900\" y1=\"120\" x2=\"750\" y2=\"170\" stroke=\"black\"/>\r\n    //                 <line x1=\"900\" y1=\"120\" x2=\"1050\" y2=\"170\" stroke=\"black\"/> \r\n    \r\n    //                 <line x1=\"150\" y1=\"170\" x2=\"75\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"150\" y1=\"170\" x2=\"225\" y2=\"220\" stroke=\"black\"/>   \r\n    //                 <line x1=\"450\" y1=\"170\" x2=\"525\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"450\" y1=\"170\" x2=\"375\" y2=\"220\" stroke=\"black\"/> \r\n                        \r\n    //                 <line x1=\"750\" y1=\"170\" x2=\"675\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"750\" y1=\"170\" x2=\"825\" y2=\"220\" stroke=\"black\"/>   \r\n    //                 <line x1=\"1050\" y1=\"170\" x2=\"1125\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"1050\" y1=\"170\" x2=\"975\" y2=\"220\" stroke=\"black\"/> \r\n\r\n    //                 <line x1=\"75\" y1=\"220\" x2=\"38\" y2=\"270\" stroke=\"black\"/>\r\n    //                 <line x1=\"75\" y1=\"220\" x2=\"113\" y2=\"270\" stroke=\"black\"/>\r\n\r\n    //                 <line x1=\"225\" y1=\"220\" x2=\"187\" y2=\"270\" stroke=\"black\"/>   \r\n    //                 <line x1=\"225\" y1=\"220\" x2=\"263\" y2=\"270\" stroke=\"black\"/>  \r\n\r\n    //                 <line x1=\"525\" y1=\"220\" x2=\"487\" y2=\"270\" stroke=\"black\"/> \r\n    //                 <line x1=\"525\" y1=\"220\" x2=\"563\" y2=\"270\" stroke=\"black\"/> \r\n\r\n    //                 <line x1=\"375\" y1=\"220\" x2=\"337\" y2=\"270\" stroke=\"black\"/> \r\n    //                 <line x1=\"375\" y1=\"220\" x2=\"413\" y2=\"270\" stroke=\"black\"/> \r\n\r\n    //                 <line x1=\"675\" y1=\"220\" x2=\"637\" y2=\"270\" stroke=\"black\"/>\r\n    //                     <line x1=\"675\" y1=\"220\" x2=\"713\" y2=\"270\" stroke=\"black\"/>\r\n\r\n    //                 <line x1=\"825\" y1=\"220\" x2=\"787\" y2=\"270\" stroke=\"black\"/>\r\n    //                 <line x1=\"825\" y1=\"220\" x2=\"863\" y2=\"270\" stroke=\"black\"/>\r\n\r\n    //                 <line x1=\"975\" y1=\"220\" x2=\"937\" y2=\"270\" stroke=\"black\"/>\r\n    //                 <line x1=\"975\" y1=\"220\" x2=\"1013\" y2=\"270\" stroke=\"black\"/>\r\n                        \r\n    //                 <line x1=\"1125\" y1=\"220\" x2=\"1087\" y2=\"270\" stroke=\"black\"/>\r\n    //                 <line x1=\"1125\" y1=\"220\" x2=\"1163\" y2=\"270\" stroke=\"black\"/>\r\n    \r\n    \r\n    //                 </>\r\n    //     )\r\n        \r\n    //     case 63:\r\n    //         return (\r\n    //             <>\r\n    //                 <line x1=\"600\" y1=\"70\" x2=\"300\" y2=\"120\" stroke=\"black\"/>\r\n    //                 <line x1=\"600\" y1=\"70\" x2=\"900\" y2=\"120\" stroke=\"black\"/>   \r\n    \r\n    //                 <line x1=\"300\" y1=\"120\" x2=\"150\" y2=\"170\" stroke=\"black\"/>\r\n    //                 <line x1=\"300\" y1=\"120\" x2=\"450\" y2=\"170\" stroke=\"black\"/>   \r\n    //                 <line x1=\"900\" y1=\"120\" x2=\"750\" y2=\"170\" stroke=\"black\"/>\r\n    //                 <line x1=\"900\" y1=\"120\" x2=\"1050\" y2=\"170\" stroke=\"black\"/> \r\n    \r\n    //                 <line x1=\"150\" y1=\"170\" x2=\"75\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"150\" y1=\"170\" x2=\"225\" y2=\"220\" stroke=\"black\"/>   \r\n    //                 <line x1=\"450\" y1=\"170\" x2=\"525\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"450\" y1=\"170\" x2=\"375\" y2=\"220\" stroke=\"black\"/> \r\n                        \r\n    //                 <line x1=\"750\" y1=\"170\" x2=\"675\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"750\" y1=\"170\" x2=\"825\" y2=\"220\" stroke=\"black\"/>   \r\n    //                 <line x1=\"1050\" y1=\"170\" x2=\"1125\" y2=\"220\" stroke=\"black\"/>\r\n    //                 <line x1=\"1050\" y1=\"170\" x2=\"975\" y2=\"220\" stroke=\"black\"/> \r\n\r\n    //                 <line x1=\"75\" y1=\"220\" x2=\"38\" y2=\"270\" stroke=\"black\"/>\r\n    //                 <line x1=\"75\" y1=\"220\" x2=\"113\" y2=\"270\" stroke=\"black\"/>\r\n\r\n    //                 <line x1=\"225\" y1=\"220\" x2=\"187\" y2=\"270\" stroke=\"black\"/>   \r\n    //                 <line x1=\"225\" y1=\"220\" x2=\"263\" y2=\"270\" stroke=\"black\"/>  \r\n\r\n    //                 <line x1=\"525\" y1=\"220\" x2=\"487\" y2=\"270\" stroke=\"black\"/> \r\n    //                 <line x1=\"525\" y1=\"220\" x2=\"563\" y2=\"270\" stroke=\"black\"/> \r\n\r\n    //                 <line x1=\"375\" y1=\"220\" x2=\"337\" y2=\"270\" stroke=\"black\"/> \r\n    //                 <line x1=\"375\" y1=\"220\" x2=\"413\" y2=\"270\" stroke=\"black\"/> \r\n\r\n    //                 <line x1=\"675\" y1=\"220\" x2=\"637\" y2=\"270\" stroke=\"black\"/>\r\n    //                     <line x1=\"675\" y1=\"220\" x2=\"713\" y2=\"270\" stroke=\"black\"/>\r\n\r\n    //                 <line x1=\"825\" y1=\"220\" x2=\"787\" y2=\"270\" stroke=\"black\"/>\r\n    //                 <line x1=\"825\" y1=\"220\" x2=\"863\" y2=\"270\" stroke=\"black\"/>\r\n\r\n    //                 <line x1=\"975\" y1=\"220\" x2=\"937\" y2=\"270\" stroke=\"black\"/>\r\n    //                 <line x1=\"975\" y1=\"220\" x2=\"1013\" y2=\"270\" stroke=\"black\"/>\r\n                        \r\n    //                 <line x1=\"1125\" y1=\"220\" x2=\"1087\" y2=\"270\" stroke=\"black\"/>\r\n    //                 <line x1=\"1125\" y1=\"220\" x2=\"1163\" y2=\"270\" stroke=\"black\"/>\r\n    \r\n    \r\n    //                 </>\r\n    //     )\r\n    \r\n    //     default:  return (\r\n    //         <>  \r\n    //         </>\r\n    //      )      \r\n    // }\r\n}\r\n\r\nexport default Line\r\n","import React from 'react'\r\nimport BinaryNode from '../binary-node/binary-node'\r\nimport Line from '../line/line'\r\nimport './binary-tree.css'\r\n\r\nfunction BinaryTree({nodes, onChangeColor, onDragStart, onDragOver, onDragDrop, onDragEnd, onDrag, top, left}) {\r\n        \r\n    const elements = nodes.map((item) => { //creating a node component for each row in node array\r\n        return (\r\n            <div key={item.id}\r\n                onDragStart={ (e) => onDragStart(e,item)}\r\n                \r\n                onDragOver={ (e) => onDragOver(e)}\r\n                onDragEnd={ (e) => onDragEnd(e, item)}\r\n                onDrag={ (e) => onDrag(e, item)}\r\n                onDrop={ (e) =>  onDragDrop(e, item)}\r\n                draggable={true}\r\n            >   \r\n                    <BinaryNode \r\n                        {...item}  \r\n                        onChangeColor={() => onChangeColor(item.id)}\r\n                    />\r\n           </div>       \r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"binary-tree\">\r\n            <svg height=\"400\" width=\"1200\" className=\"svg-container\">\r\n                <Line nodes={nodes.length} nodesArr={nodes} postop={top} posleft={left}/>\r\n            </svg>\r\n            {elements}\r\n\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default BinaryTree","import React, { useState } from 'react'\r\nimport './input-panel.css'\r\n\r\nfunction InputPanel({onInput}) {\r\n    const [nodeNumber, setnodeNumber] = useState('');\r\n    const [text, settext] = useState('');\r\n\r\n    const sendNumber = (e) => { //sending input value parameter to function in app.js\r\n        e.preventDefault();\r\n        onInput(nodeNumber);\r\n    }\r\n\r\n    const changeValue = (e) => { //checking input value, adding into state\r\n        if (!isNaN(e.target.value) && (+e.target.value < 7)) {\r\n             \r\n            setnodeNumber(e.target.value);\r\n            settext(\"\");\r\n        } else {\r\n            settext(\"Введите число меньше 7\");\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={sendNumber}>\r\n                <input \r\n                    className=\"form-input\" \r\n                    type=\"text\" \r\n                    placeholder=\"Введите количество уровней\" \r\n                    onChange={changeValue}\r\n                    value={nodeNumber}\r\n                />\r\n                <button \r\n                    className=\"btn-show\"\r\n                    type=\"submit\"\r\n                >Показать\r\n                </button>\r\n                <span>{text}</span>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputPanel\r\n","import React, { useState } from 'react'\r\nimport BinaryTree from '../binary-tree/binary-tree'\r\nimport InputPanel from '../input-panel/input-panel'\r\nimport { HuePicker } from 'react-color'\r\n\r\nimport './app.css'\r\n\r\nfunction App(props) {\r\n    const [nodesArray, setnodesArray] = useState([]);   //array of tree nodes\r\n    const [currentNode, setCurrentNode] = useState(null); //current tree node(used for d&d)\r\n    const [posX, setposX] = useState(0); //current tree node(used for d&d)\r\n    const [posY, setposY] = useState(0); //current tree node(used for d&d)\r\n    const [posTop, setposTop] = useState(0); //current tree node(used for d&d)\r\n    const [posLeft, setposLeft] = useState(0); //current tree node(used for d&d)\r\n    const [leftStyle, setleftStyle] = useState(0); //current tree node(used for d&d)\r\n    const [topStyle, settopStyle] = useState(0); //current tree node(used for d&d)\r\n    const [dragging, setdragging] = useState(false); //current tree node(used for d&d)\r\n    const [currentPos, setCurrentPos] = useState({\r\n        x: 0,\r\n        y: 0,\r\n        dragging: false,\r\n        left: 0,\r\n        top: 0\r\n    }); //current tree node(used for d&d)\r\n    const [color, setcolor] = useState(\"#ff0000\"); //state for changing color\r\n\r\n    const infoText = [\r\n        `1 - Укажите количество уровней дерева N (При N > 5 линии отключены);`, \r\n        `2 - Для изменения цвета узла и его потомков выберите цвет и выполните клик по одному из узлов дерева;`,\r\n        `3 - Вы можете менять узлы дерева местами зажатием ЛКМ.`\r\n    ]; //info arr on page\r\n\r\n    const infoTextShow = infoText.map((item, key) => { // creating info p tags\r\n        return (\r\n                <p key={key}>{item}</p>\r\n        );\r\n    })\r\n \r\n    \r\n\r\n    function dragStartHandler (e, node)  { //getting current node on start d&d\r\n        setCurrentNode(node);\r\n        \r\n        // const x = node.left;\r\n        // const y = node.top;\r\n        const x = e.currentTarget.parentNode.getBoundingClientRect().left - e.currentTarget.getBoundingClientRect().left;\r\n        const y = e.currentTarget.parentNode.getBoundingClientRect().top - e.currentTarget.getBoundingClientRect().top;\r\n        \r\n        const dragging = true;\r\n        setposX(x);\r\n        setposY(y);\r\n        setdragging(dragging);\r\n        \r\n       \r\n        console.log('drag', node);\r\n       \r\n    }\r\n\r\n    function dragOverHandler(e)  { //canceling standard browser functionality\r\n        e.preventDefault();\r\n    }\r\n\r\n    function dragHandler(e, node) {\r\n        if (dragging) {\r\n            let left =  e.pageX - e.currentTarget.getBoundingClientRect().left - 20;\r\n            let top = e.pageY - e.currentTarget.getBoundingClientRect().top +398;\r\n            setposTop(top);\r\n            setposLeft(left);\r\n            \r\n        }\r\n        setnodesArray(nodesArray.map(item => {\r\n            if (item.value === node.value ) {\r\n                return {...item, left:posLeft, top:posTop};\r\n            } return item;\r\n        }))\r\n        \r\n            // if (item.value === currentNode.value) {\r\n            //     return {...item, value:node.value, id:node.id, \r\n            //             bgcolor:node.bgcolor, leftChild:currentNode.leftChild, rightChild:currentNode.rightChild}\r\n            // }\r\n            \r\n        \r\n       \r\n    }\r\n\r\n\r\n\r\n    function dragEndHandler(e, node) {\r\n        setdragging(false);\r\n        \r\n        \r\n    }\r\n\r\n    function dropHandler (e, node)  { //swapping nodes parameters on drop\r\n        e.preventDefault();\r\n        console.log('drop', node);\r\n\r\n        // setnodesArray(nodesArray.map(item => {\r\n        //     if (item.value === node.value ) {\r\n        //         return {...item, value:currentNode.value, id:currentNode.id, \r\n        //                 bgcolor:currentNode.bgcolor, leftChild:node.leftChild, rightChild:node.rightChild}\r\n        //     }\r\n        //     if (item.value === currentNode.value) {\r\n        //         return {...item, value:node.value, id:node.id, \r\n        //                 bgcolor:node.bgcolor, leftChild:currentNode.leftChild, rightChild:currentNode.rightChild}\r\n        //     }\r\n        //     return item;\r\n        // }))\r\n        \r\n        \r\n    }\r\n\r\n    const changeNodeColor = (id) => { //changing color of selected node\r\n        \r\n        const colorChilds = (key, arr, left, right) => {\r\n            for (let i = key; i < arr.length; i++) {\r\n                if (arr[i].value === right) {\r\n                    arr[i].bgcolor = color;\r\n                    colorChilds(i, arr, arr[i].leftChild, arr[i].rightChild);\r\n                } else\r\n                if (arr[i].value === left) {\r\n                    arr[i].bgcolor = color;\r\n                    colorChilds(i, arr, arr[i].leftChild, arr[i].rightChild);\r\n                } else {\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        \r\n        setnodesArray(() => {\r\n            const index = nodesArray.findIndex(elem => elem.id === id);\r\n            let newArr = [...nodesArray];\r\n            let right =  newArr[index].rightChild;\r\n            let left =  newArr[index].leftChild;\r\n            newArr[index].bgcolor = color;\r\n            colorChilds(index, newArr, left, right);\r\n            return newArr;\r\n        })\r\n    }\r\n\r\n    const createNodeTree = (nodes) => { //creating array of nodes using it's length value\r\n        setnodesArray(() => {\r\n\r\n            let newArr =    [],\r\n                top =       60, \r\n                left =      585,\r\n                b =         left,\r\n                k =         1,\r\n                rightNode = left,\r\n                value =     0,\r\n                parent = value;\r\n            \r\n            for (let i = 0; i < nodes; i++) {\r\n                for (let y = 1; y <= k; y++) {\r\n                    if (y === 1) {\r\n                        newArr.push({value, top, left:rightNode,  bgcolor: '#fff', id: value, \r\n                        leftChild: value * 2 + 1, rightChild: value * 2 + 2});\r\n                        b = rightNode;\r\n                    } else { \r\n                        b += left/k*2;\r\n                        newArr.push({value, top, left:b,  bgcolor: '#fff', id: value, \r\n                        leftChild: value * 2 + 1, rightChild: value * 2 + 2});\r\n                    }\r\n                    \r\n                    value++;\r\n                    parent++;\r\n                }\r\n                \r\n                rightNode -= left/k/2;\r\n                k*=2;\r\n                top += 50;\r\n            }\r\n             \r\n            return newArr;\r\n        })  \r\n\r\n        // setnodesArray(nodesArray.map((item) => {\r\n        //     let value = item.value;\r\n            \r\n        //     return {...item, leftChild : value * 2 + 1, rightChild : value * 2 + 2};\r\n        // }));\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n            <>\r\n            <div className=\"wrapper\">\r\n                <div className=\"control-panel\">\r\n                    <InputPanel onInput={createNodeTree} />\r\n                    <HuePicker   \r\n                        className=\"color-picker\"\r\n                        color={color}\r\n                        onChange={(updateColor) => setcolor(updateColor.hex)}\r\n                    /> \r\n                </div>\r\n                <div className=\"info-panel\">\r\n                    {infoTextShow}\r\n                </div>\r\n                \r\n\r\n                <BinaryTree \r\n                    nodes={nodesArray}  \r\n                    onChangeColor={changeNodeColor}\r\n                    onDragStart={dragStartHandler}\r\n                    onDragOver={dragOverHandler}\r\n                    onDragEnd={dragEndHandler}\r\n                    onDrag={dragHandler}\r\n                    onDragDrop={dropHandler}\r\n                    top={posTop}\r\n                    left={posLeft}\r\n                />\r\n            </div>\r\n            </>\r\n            \r\n    )  \r\n}\r\n\r\nexport default App\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}